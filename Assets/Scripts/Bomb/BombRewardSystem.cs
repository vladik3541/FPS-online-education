using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using ExitGames.Client.Photon;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–æ—Ä–æ–¥ –∑–∞ –¥—ñ—ó –∑ –±–æ–º–±–æ—é
/// –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ BombManager –∞–±–æ –æ–∫—Ä–µ–º–æ–≥–æ GameObject
/// </summary>
public class BombRewardSystem : MonoBehaviourPunCallbacks
{
    [Header("Monetary Rewards")]
    [SerializeField] private int bombPlantReward = 300;      // –ó–∞ –∑–∞–∫–ª–∞–¥–∞–Ω–Ω—è –±–æ–º–±–∏
    [SerializeField] private int bombDefuseReward = 300;     // –ó–∞ –∑–Ω–µ—à–∫–æ–¥–∂–µ–Ω–Ω—è –±–æ–º–±–∏
    [SerializeField] private int bombExplodeBonus = 500;     // –ë–æ–Ω—É—Å T —è–∫—â–æ –±–æ–º–±–∞ –≤–∏–±—É—Ö–ª–∞
    [SerializeField] private int bombCarrierBonus = 100;     // –ë–æ–Ω—É—Å –Ω–æ—Å—ñ—é –±–æ–º–±–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä–∞—É–Ω–¥—É
    
    [Header("Experience/Stats")]
    [SerializeField] private int plantXP = 50;
    [SerializeField] private int defuseXP = 100;
    [SerializeField] private int explodeXP = 75;
    
    private BombManager bombManager;
    private int lastBombPlanter = -1;      // –•—Ç–æ –∑–∞–∫–ª–∞–≤ –±–æ–º–±—É
    private int lastBombDefuser = -1;      // –•—Ç–æ –∑–Ω–µ—à–∫–æ–¥–∏–≤ –±–æ–º–±—É

    void Start()
    {
        bombManager = BombManager.Instance;
    }

    /// <summary>
    /// –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –∑–∞–∫–ª–∞–≤ –±–æ–º–±—É
    /// </summary>
    public void OnBombPlanted(int planterActorId)
    {
        if (!PhotonNetwork.IsMasterClient) return;

        lastBombPlanter = planterActorId;
        GiveReward(planterActorId, bombPlantReward, plantXP);
        
        // –ó–±—ñ–ª—å—à—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        IncrementPlayerStat(planterActorId, "bombsPlanted");
        
        Debug.Log($"üí∞ –ì—Ä–∞–≤–µ—Ü—å {planterActorId} –æ—Ç—Ä–∏–º–∞–≤ {bombPlantReward}$ –∑–∞ –∑–∞–∫–ª–∞–¥–∞–Ω–Ω—è –±–æ–º–±–∏");
    }

    /// <summary>
    /// –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –∑–Ω–µ—à–∫–æ–¥–∏–≤ –±–æ–º–±—É
    /// </summary>
    public void OnBombDefused(int defuserActorId)
    {
        if (!PhotonNetwork.IsMasterClient) return;

        lastBombDefuser = defuserActorId;
        GiveReward(defuserActorId, bombDefuseReward, defuseXP);
        
        // –ó–±—ñ–ª—å—à—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        IncrementPlayerStat(defuserActorId, "bombsDefused");
        
        Debug.Log($"üí∞ –ì—Ä–∞–≤–µ—Ü—å {defuserActorId} –æ—Ç—Ä–∏–º–∞–≤ {bombDefuseReward}$ –∑–∞ –∑–Ω–µ—à–∫–æ–¥–∂–µ–Ω–Ω—è –±–æ–º–±–∏");
    }

    /// <summary>
    /// –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –±–æ–º–±–∞ –≤–∏–±—É—Ö–ª–∞
    /// </summary>
    public void OnBombExploded()
    {
        if (!PhotonNetwork.IsMasterClient) return;

        // –î–∞—î–º–æ –±–æ–Ω—É—Å –≥—Ä–∞–≤—Ü—é —â–æ –∑–∞–∫–ª–∞–≤ –±–æ–º–±—É
        if (lastBombPlanter != -1)
        {
            GiveReward(lastBombPlanter, bombExplodeBonus, explodeXP);
            Debug.Log($"üí∞ –ì—Ä–∞–≤–µ—Ü—å {lastBombPlanter} –æ—Ç—Ä–∏–º–∞–≤ {bombExplodeBonus}$ –∑–∞ –≤–∏–±—É—Ö –±–æ–º–±–∏");
        }

        // –î–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –±–æ–Ω—É—Å –≤—Å—ñ–º —Ç–µ—Ä–æ—Ä–∏—Å—Ç–∞–º —â–æ –∂–∏–≤—ñ
        RewardAliveTeam(0, 200); // 0 = T –∫–æ–º–∞–Ω–¥–∞
    }

    /// <summary>
    /// –î–∞—î —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –±–æ–Ω—É—Å –Ω–æ—Å—ñ—é –±–æ–º–±–∏
    /// </summary>
    public void OnBombCarrierAssigned(int carrierActorId)
    {
        if (!PhotonNetwork.IsMasterClient) return;

        GiveReward(carrierActorId, bombCarrierBonus, 0);
        Debug.Log($"üí∞ –ù–æ—Å—ñ–π –±–æ–º–±–∏ {carrierActorId} –æ—Ç—Ä–∏–º–∞–≤ –±–æ–Ω—É—Å {bombCarrierBonus}$");
    }

    /// <summary>
    /// –°–∫–∏–¥–∞—î –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º —Ä–∞—É–Ω–¥–æ–º
    /// </summary>
    public void ResetRound()
    {
        lastBombPlanter = -1;
        lastBombDefuser = -1;
    }

    // === –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò ===

    private void GiveReward(int actorId, int money, int xp)
    {
        Player player = PhotonNetwork.CurrentRoom.GetPlayer(actorId);
        if (player == null) return;

        // –î–∞—î–º–æ –≥—Ä–æ—à—ñ
        int currentMoney = player.CustomProperties.ContainsKey("money") 
            ? (int)player.CustomProperties["money"] : 0;
        int newMoney = Mathf.Clamp(currentMoney + money, 0, 16000);

        // –î–∞—î–º–æ XP
        int currentXP = player.CustomProperties.ContainsKey("xp") 
            ? (int)player.CustomProperties["xp"] : 0;
        int newXP = currentXP + xp;

        Hashtable props = new Hashtable 
        { 
            { "money", newMoney },
            { "xp", newXP }
        };
        player.SetCustomProperties(props);
    }

    private void IncrementPlayerStat(int actorId, string statName)
    {
        Player player = PhotonNetwork.CurrentRoom.GetPlayer(actorId);
        if (player == null) return;

        int currentStat = player.CustomProperties.ContainsKey(statName) 
            ? (int)player.CustomProperties[statName] : 0;

        Hashtable props = new Hashtable { { statName, currentStat + 1 } };
        player.SetCustomProperties(props);
    }

    private void RewardAliveTeam(int teamIndex, int bonus)
    {
        foreach (Player player in PhotonNetwork.PlayerList)
        {
            if (!player.CustomProperties.ContainsKey("team")) continue;
            if (!player.CustomProperties.ContainsKey("isAlive")) continue;

            int team = (int)player.CustomProperties["team"];
            bool isAlive = (bool)player.CustomProperties["isAlive"];

            if (team == teamIndex && isAlive)
            {
                GiveReward(player.ActorNumber, bonus, 0);
            }
        }
    }

    // === –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–∫–ª–∞–¥–µ–Ω–∏—Ö –±–æ–º–± –≥—Ä–∞–≤—Ü–µ–º
    /// </summary>
    public int GetPlayerBombsPlanted(Player player)
    {
        return player.CustomProperties.ContainsKey("bombsPlanted") 
            ? (int)player.CustomProperties["bombsPlanted"] : 0;
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–µ—à–∫–æ–¥–∂–µ–Ω–∏—Ö –±–æ–º–± –≥—Ä–∞–≤—Ü–µ–º
    /// </summary>
    public int GetPlayerBombsDefused(Player player)
    {
        return player.CustomProperties.ContainsKey("bombsDefused") 
            ? (int)player.CustomProperties["bombsDefused"] : 0;
    }

    /// <summary>
    /// –û—Ç—Ä–∏–º–∞—Ç–∏ XP –≥—Ä–∞–≤—Ü—è
    /// </summary>
    public int GetPlayerXP(Player player)
    {
        return player.CustomProperties.ContainsKey("xp") 
            ? (int)player.CustomProperties["xp"] : 0;
    }

    // === –î–û–°–Ø–ì–ù–ï–ù–ù–Ø ===

    private void CheckAchievements(int actorId)
    {
        Player player = PhotonNetwork.CurrentRoom.GetPlayer(actorId);
        if (player == null) return;

        int bombsPlanted = GetPlayerBombsPlanted(player);
        int bombsDefused = GetPlayerBombsDefused(player);

        // –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
        if (bombsPlanted >= 10)
        {
            UnlockAchievement(actorId, "Demolition Expert");
        }

        if (bombsDefused >= 10)
        {
            UnlockAchievement(actorId, "Bomb Squad");
        }

        if (bombsPlanted >= 50)
        {
            UnlockAchievement(actorId, "Terrorist Legend");
        }

        if (bombsDefused >= 50)
        {
            UnlockAchievement(actorId, "Counter-Strike Hero");
        }
    }

    private void UnlockAchievement(int actorId, string achievementName)
    {
        Player player = PhotonNetwork.CurrentRoom.GetPlayer(actorId);
        if (player == null) return;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î —Ü–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        string achievementKey = $"achievement_{achievementName}";
        if (player.CustomProperties.ContainsKey(achievementKey)) return;

        // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ
        Hashtable props = new Hashtable { { achievementKey, true } };
        player.SetCustomProperties(props);

        Debug.Log($"üèÜ –ì—Ä–∞–≤–µ—Ü—å {player.NickName} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {achievementName}");
        
        // –¢—É—Ç –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ UI –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    }
}

// === –†–û–ó–®–ò–†–ï–ù–ù–Ø –î–õ–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó BOMBMANAGER ===
/*
 * –î–æ–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ –¥–æ BombManager:
 * 
 * –í PlantBomb_RPC():
 *     BombRewardSystem rewards = GetComponent<BombRewardSystem>();
 *     if (rewards != null) rewards.OnBombPlanted(currentPlantingPlayer);
 * 
 * –í DefuseBomb_RPC():
 *     BombRewardSystem rewards = GetComponent<BombRewardSystem>();
 *     if (rewards != null) rewards.OnBombDefused(currentDefusingPlayer);
 * 
 * –í ExplodeBomb_RPC():
 *     BombRewardSystem rewards = GetComponent<BombRewardSystem>();
 *     if (rewards != null) rewards.OnBombExploded();
 * 
 * –í AssignBombCarrier():
 *     BombRewardSystem rewards = GetComponent<BombRewardSystem>();
 *     if (rewards != null) rewards.OnBombCarrierAssigned(bombCarrierActorId);
 * 
 * –í ResetBomb():
 *     BombRewardSystem rewards = GetComponent<BombRewardSystem>();
 *     if (rewards != null) rewards.ResetRound();
 */